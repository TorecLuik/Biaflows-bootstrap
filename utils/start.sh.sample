#!/bin/bash

# Copyright (c) 2023. Authors: Torec Luik
# Copyright (c) 2009-2018. Authors: see NOTICE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

echo "Starting Cytomine..."
echo "Configuration:"
echo "* Main URLs *"
echo "CORE_URL=$CORE_URL"
echo "IMS_URL=$IMS_URL"
echo "UPLOAD_URL=$UPLOAD_URL"
echo ""
echo "* Plugins *"
echo "BACKUP=$BACKUP_ENABLED"
echo "RETRIEVAL=$RETRIEVAL_ENABLED"
echo "IRIS=$IRIS_ENABLED"
echo "IIPJP2=$IIP_JP2_ENABLED"
echo "BIOFORMAT=$BIOFORMAT_ENABLED"
echo "SOFTWARE=$SOFTWARE_ENABLED"
echo "CORE_DEVELOPMENT=$CORE_DEVELOPMENT"
echo "IMS_DEVELOPMENT=$IMS_DEVELOPMENT"
echo "WEB_UI_DEVELOPMENT=$WEB_UI_DEVELOPMENT"
echo "BIOFORMAT_DEVELOPMENT=$BIOFORMAT_DEVELOPMENT"
echo ""
echo "* Container versions *"
echo "$NGINX_NAMESPACE/nginx:$NGINX_VERSION"
if [[ $CORE_DEVELOPMENT = false ]]; then echo "$CORE_NAMESPACE/core:$CORE_VERSION"; fi
if [[ $WEB_UI_DEVELOPMENT = false ]]; then echo "$WEB_UI_NAMESPACE/web-ui:$WEB_UI_VERSION"; fi
echo "$POSTGRES_NAMESPACE/postgres:$POSTGRES_VERSION"
echo "$MONGODB_NAMESPACE/mongodb:$MONGODB_VERSION"
if [[ $BACKUP_ENABLED = true ]]; then echo "$BACKUP_NAMESPACE/backup:$BACKUP_VERSION"; fi
if [[ $IMS_DEVELOPMENT = false ]]; then echo "$IMS_NAMESPACE/ims:$IMS_VERSION"; fi
if [[ $BIOFORMAT_ENABLED = true ]]; then echo "$BIOFORMAT_NAMESPACE/bioformat:$BIOFORMAT_VERSION"; fi
echo "$IIPCYTO_NAMESPACE/iip-cyto:$IIPCYTO_VERSION"
if [[ $IIP_JP2_ENABLED = true ]]; then echo "$IIPJP2_NAMESPACE/iip-jp2000:$IIPJP2_VERSION"; fi
echo "$MEMCACHED_NAMESPACE/memcached:$MEMCACHED_VERSION"
if [[ $RETRIEVAL_ENABLED = true ]]; then echo "$RETRIEVAL_NAMESPACE/retrieval:$RETRIEVAL_VERSION"; fi
if [[ $IRIS_ENABLED = true ]]; then echo "$IRIS_NAMESPACE/iris:$IRIS_VERSION"; fi
if [[ $SOFTWARE_ENABLED = true ]]; then echo "$RABBITMQ_NAMESPACE/rabbitmq:$RABBITMQ_VERSION"; fi
if [[ $SOFTWARE_ENABLED = true ]]; then echo "$SLURM_NAMESPACE/slurm:$SLURM_VERSION"; fi
if [[ $SOFTWARE_ENABLED = true ]]; then echo "$SOFTWAREROUTER_NAMESPACE/software_router:$SOFTWAREROUTER_VERSION"; fi
echo ""

# Create server SSH keys if needed
SERVER_SSHKEYS_FILE="$SERVER_SSHKEYS_PATH/id_rsa"
YUM_CMD=$(which yum)
APT_GET_CMD=$(which apt-get)
DNF_CMD=$(which dnf)
if [ ! -e $SERVER_SSHKEYS_FILE ]
then
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        if [[ ! -z $APT_GET_CMD ]]; then
            apt-get install -y openssh-client
        elif [[ ! -z $YUM_CMD ]]; then
            yum install -y openssh-clients
        elif [[ ! -z $DNF_CMD ]]; then
            dnf install -y openssh-clients
        fi
    fi
    ssh-keygen -t rsa -m PEM -N "" -C $CORE_URL -f $SERVER_SSHKEYS_FILE
fi

# ----- Network -----
podman network create ${INSTANCE_PREFIX}biaflows-net > /dev/null

# ----- MEMCACHED -----
podman create --name ${INSTANCE_PREFIX}memcached \
--network ${INSTANCE_PREFIX}biaflows-net \
--network-alias=memcached \
--restart=unless-stopped \
$MEMCACHED_NAMESPACE/memcached:$MEMCACHED_VERSION > /dev/null

podman cp "${PWD}/configs/memcached/memcached.conf" ${INSTANCE_PREFIX}memcached:/etc/memcached.conf
podman start ${INSTANCE_PREFIX}memcached


# ----- RABBITMQ -----
if [[ $SOFTWARE_ENABLED = true ]]
then
    podman create --name ${INSTANCE_PREFIX}rabbitmq \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=rabbitmq \
    -p 5672:5672 -p 15672:15672 \
    -e RABBITMQ_PASS=$RABBITMQ_PASSWORD \
    --privileged \
    --restart=unless-stopped \
    $RABBITMQ_NAMESPACE/rabbitmq:$RABBITMQ_VERSION > /dev/null

    podman start ${INSTANCE_PREFIX}rabbitmq
fi


# ----- POSTGRESQL ------
podman volume create $POSTGRESQL_VOLUME > /dev/null
podman create --name ${INSTANCE_PREFIX}postgresql \
--network ${INSTANCE_PREFIX}biaflows-net \
--network-alias=postgresql \
-p 5432:5432 \
-v $POSTGRESQL_VOLUME:/var/lib/postgresql/data:Z,U \
-e PGDATA=/var/lib/postgresql/data/db-files/ \
--restart=unless-stopped \
$POSTGRES_NAMESPACE/postgres:$POSTGRES_VERSION postgres -c 'config_file=/tmp/postgresql.conf' > /dev/null

podman cp "${PWD}/configs/postgresql/postgresql.conf" ${INSTANCE_PREFIX}postgresql:/tmp/postgresql.conf
podman start ${INSTANCE_PREFIX}postgresql


# ----- MONGODB -----
podman volume create $MONGODB_VOLUME > /dev/null
podman run -d \
-p 27017:27017 -p 28017:28017 \
--name ${INSTANCE_PREFIX}mongodb \
--network ${INSTANCE_PREFIX}biaflows-net \
--network-alias=mongodb \
-v $MONGODB_VOLUME:/data/db:Z,U \
--restart=unless-stopped \
$MONGODB_NAMESPACE/mongodb:$MONGODB_VERSION > /dev/null


# ----- BACKUP POSTGRESQL -----
# note, broken as it expects 'db' namespace
if [[ $BACKUP_ENABLED = true ]]
then
	# create backup podman
	podman run -d --name ${INSTANCE_PREFIX}backup_postgis \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=backup_postgis \
    -v $BACKUP_PATH/postgis:/backup:Z,U --restart=unless-stopped \
	-e SENDER_EMAIL=$SENDER_EMAIL \
	-e SENDER_EMAIL_PASS=$SENDER_EMAIL_PASS \
	-e SENDER_EMAIL_SMTP_HOST=$SENDER_EMAIL_SMTP_HOST \
	-e SENDER_EMAIL_SMTP_PORT=$SENDER_EMAIL_SMTP_PORT \
	-e RECEIVER_EMAIL=$RECEIVER_EMAIL \
	-e SGBD='postgres' \
	-e DATABASE='podman' \
	-e USER='podman' \
	-e PASSWD='podman' \
	$BACKUP_NAMESPACE/backup:$BACKUP_VERSION > /dev/null
fi


# ----- BACKUP MONGODB -----
# note broken as it expects 'db' namespace (instead of mongodb)
if [[ $BACKUP_ENABLED = true ]]
then
	podman run -d --name ${INSTANCE_PREFIX}backup_mongo \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=backup_mongo \
    -v $BACKUP_PATH/mongo:/backup:Z,U --restart=unless-stopped \
	-e SGBD='mongodb' \
	-e SENDER_EMAIL=$SENDER_EMAIL \
	-e SENDER_EMAIL_PASS=$SENDER_EMAIL_PASS \
	-e SENDER_EMAIL_SMTP_HOST=$SENDER_EMAIL_SMTP_HOST \
	-e SENDER_EMAIL_SMTP_PORT=$SENDER_EMAIL_SMTP_PORT \
	-e RECEIVER_EMAIL=$RECEIVER_EMAIL \
	$BACKUP_NAMESPACE/backup:$BACKUP_VERSION > /dev/null
fi

# ----- RETRIEVAL -----
if [[ $RETRIEVAL_ENABLED = true ]]
then
    podman create --name ${INSTANCE_PREFIX}retrieval \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=retrieval \
    -v $RETRIEVAL_PATH:/data/thumb:Z,U \
    -e RETRIEVAL_ENGINE=$RETRIEVAL_ENGINE \
    -e RETRIEVAL_PASSWORD=$RETRIEVAL_PASSWORD \
    --restart=unless-stopped \
    $RETRIEVAL_NAMESPACE/retrieval:$RETRIEVAL_VERSION > /dev/null

    podman cp "${PWD}/hosts/retrieval/addHosts.sh" ${INSTANCE_PREFIX}retrieval:/tmp/addHosts.sh
    podman start ${INSTANCE_PREFIX}retrieval
fi

# ----- IIP JP2 -----
if [[ $IIP_JP2_ENABLED = true ]]
then
    podman create --name ${INSTANCE_PREFIX}iipJP2 \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=iipJP2 \
    -v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH:Z,U \
    --privileged \
    -e NB_IIP_PROCESS=$NB_IIP_PROCESS \
    --restart=unless-stopped \
    $IIPJP2_NAMESPACE/iip-jp2000:$IIPJP2_VERSION > /dev/null

    podman cp "${PWD}/configs/iipJP2/nginx.conf.sample" ${INSTANCE_PREFIX}iipJP2:/tmp/nginx.conf.sample
    podman start ${INSTANCE_PREFIX}iipJP2
fi

# ----- IIP CYTO -----
podman create --name ${INSTANCE_PREFIX}iipCyto \
--network ${INSTANCE_PREFIX}biaflows-net \
--network-alias=iipCyto \
-v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH:Z,U \
--privileged \
-e NB_IIP_PROCESS=$NB_IIP_PROCESS \
--restart=unless-stopped \
$IIPCYTO_NAMESPACE/iip-cyto:$IIPCYTO_VERSION > /dev/null

podman cp "${PWD}/configs/iipCyto/nginx.conf.sample" ${INSTANCE_PREFIX}iipCyto:/tmp/nginx.conf.sample
podman cp "${PWD}/configs/iipCyto/iip-configuration.sh" ${INSTANCE_PREFIX}iipCyto:/tmp/iip-configuration.sh
podman start ${INSTANCE_PREFIX}iipCyto


# ----- BIOFORMAT -----
if [[ $BIOFORMAT_ENABLED = true && $BIOFORMAT_DEVELOPMENT = false ]]
then
    podman create --name ${INSTANCE_PREFIX}bioformat \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=bioformat \
    -v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH:Z,U \
    --privileged \
    -e BIOFORMAT_PORT=4321 \
    --restart=unless-stopped \
    $BIOFORMAT_NAMESPACE/bioformat:$BIOFORMAT_VERSION > /dev/null

    podman start ${INSTANCE_PREFIX}bioformat
fi


# ----- IMS -----
if [[ $IMS_DEVELOPMENT = false ]]
then
    podman create --name ${INSTANCE_PREFIX}ims \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=ims \
    --privileged \
    -e IMS_STORAGE_PATH=$IMS_STORAGE_PATH \
    -e FAST_DATA_PATH=$IMS_STORAGE_PATH \
    -v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH:Z,U \
    -v $IMS_BUFFER_PATH:/tmp/uploaded:Z,U \
    --restart=unless-stopped \
    $IMS_NAMESPACE/ims:$IMS_VERSION > /dev/null

    if [ -e "${PWD}/artifacts/IMS.war" ]; then
        podman cp "${PWD}/artifacts/IMS.war" ${INSTANCE_PREFIX}ims:/var/lib/tomcat7/webapps/ROOT.war
    fi

    podman cp "${PWD}/configs/ims/ims-config.groovy" ${INSTANCE_PREFIX}ims:/usr/share/tomcat7/.grails/ims-config.groovy
    podman cp "${PWD}/hosts/ims/addHosts.sh" ${INSTANCE_PREFIX}ims:/tmp/addHosts.sh
    podman start ${INSTANCE_PREFIX}ims
fi

# ----- CORE -----
if [[ $CORE_DEVELOPMENT = false ]]
then
    podman create --name ${INSTANCE_PREFIX}core \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=core \
    -v /etc/localtime:/etc/localtime:Z,U \
    --restart=unless-stopped \
    $CORE_NAMESPACE/core:$CORE_VERSION > /dev/null

    if [ -e "${PWD}/artifacts/core.war" ]; then
        podman cp "${PWD}/artifacts/core.war" ${INSTANCE_PREFIX}core:/var/lib/tomcat7/webapps/ROOT.war
    fi

    if [ -e "${PWD}/artifacts/restapidoc.json" ]; then
        podman cp "${PWD}/artifacts/restapidoc.json" ${INSTANCE_PREFIX}core:/var/lib/tomcat7/restapidoc.json
    fi

    podman cp "${PWD}/configs/core/cytomineconfig.groovy" ${INSTANCE_PREFIX}core:/usr/share/tomcat7/.grails/cytomineconfig.groovy
    podman cp "${PWD}/hosts/core/addHosts.sh" ${INSTANCE_PREFIX}core:/tmp/addHosts.sh
    podman start ${INSTANCE_PREFIX}core
fi

# ----- WEB-UI -----
if [[ $WEB_UI_DEVELOPMENT = false ]]
then
    podman create --name ${INSTANCE_PREFIX}webUI \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=webUI \
    -v /etc/localtime:/etc/localtime:Z,U \
    --restart=unless-stopped \
    $WEB_UI_NAMESPACE/web-ui:$WEB_UI_VERSION > /dev/null

    if [ -e "${PWD}/artifacts/web-ui" ]; then
    	podman cp "${PWD}/artifacts/web-ui/." ${INSTANCE_PREFIX}webUI:/app
    fi

    podman cp "${PWD}/configs/web-ui/configuration.json" ${INSTANCE_PREFIX}webUI:/app/configuration.json
    podman cp "${PWD}/configs/web-ui/nginx.conf" ${INSTANCE_PREFIX}webUI:/etc/nginx/nginx.conf
    podman start ${INSTANCE_PREFIX}webUI
fi

# ----- IRIS -----
if [[ $IRIS_ENABLED = true ]]
then
    podman volume create $IRIS_VOLUME > /dev/null
    podman create --name ${INSTANCE_PREFIX}iris \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=iris \
    -v $IRIS_VOLUME:/var/lib/tomcat7/db:Z,U \
    --restart=unless-stopped \
    $IRIS_NAMESPACE/iris:$IRIS_VERSION > /dev/null

    podman cp "${PWD}/configs/iris/iris-config.groovy" ${INSTANCE_PREFIX}iris:/usr/share/tomcat7/.grails/iris-config.groovy
    podman cp "${PWD}/configs/iris/iris-production-config.groovy" ${INSTANCE_PREFIX}iris:/usr/share/tomcat7/.grails/iris-production-config.groovy
    podman cp "${PWD}/hosts/iris/addHosts.sh" ${INSTANCE_PREFIX}iris:/tmp/addHosts.sh
    podman start ${INSTANCE_PREFIX}iris
fi

# ----- NGINX -----
podman create --name ${INSTANCE_PREFIX}nginx \
--network ${INSTANCE_PREFIX}biaflows-net \
--network-alias=nginx \
-v $IMS_BUFFER_PATH:/tmp/uploaded:Z,U \
-v $CERTIFICATE_PATH:/certificates:Z,U \
-p $HTTP_NGINX_PORT:80 \
-p $HTTPS_NGINX_PORT:443 \
--restart=unless-stopped \
$NGINX_NAMESPACE/nginx:$NGINX_VERSION > /dev/null

podman cp "${PWD}/configs/nginx/nginx.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/nginx.conf
podman cp "${PWD}/configs/nginx/server-core.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/server-core.conf
podman cp "${PWD}/configs/nginx/server-ims.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/server-ims.conf

if [[ $IRIS_ENABLED = true ]]; then podman cp "${PWD}/configs/nginx/server-iris.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/server-iris.conf; fi
if [[ $RETRIEVAL_ENABLED = true ]]; then podman cp "${PWD}/configs/nginx/server-retrieval.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/server-retrieval.conf; fi
if [[ $IIP_JP2_ENABLED = true ]]; then podman cp "${PWD}/configs/nginx/server-iipjp2.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/server-iipjp2.conf; fi
if [[ $WEB_UI_DEVELOPMENT = true ]]; then podman cp "${PWD}/configs/nginx/web-ui-dev-cors.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/web-ui-dev-cors.conf; fi
podman start ${INSTANCE_PREFIX}nginx


# ----- SLURM -----
if [[ $SOFTWARE_ENABLED = true ]]
then
    podman volume create $SLURM_VOLUME > /dev/null
    podman create --name ${INSTANCE_PREFIX}slurm -t -h cytomine-slurm \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=slurm \
    --privileged \
    -v $SLURM_VOLUME:/var/lib/mysql:Z,U \
    -v $SERVER_SSHKEYS_PATH:$SERVER_SSHKEYS_PATH:Z,U \
    -v $SOFTWARE_DOCKER_IMAGES_PATH:$SOFTWARE_DOCKER_IMAGES_PATH:Z,U \
    -e SERVER_SSHKEYS_FILE=$SERVER_SSHKEYS_FILE \
    -p 10022:22 \
    --restart=unless-stopped \
    $SLURM_NAMESPACE/slurm:$SLURM_VERSION > /dev/null

    podman cp "${PWD}/hosts/slurm/addHosts.sh" ${INSTANCE_PREFIX}slurm:/tmp/addHosts.sh
    podman start ${INSTANCE_PREFIX}slurm
fi

# ----- SOFTWARE ROUTER -----
if [[ $SOFTWARE_ENABLED = true ]]
then
    podman create --name ${INSTANCE_PREFIX}software_router \
    --network ${INSTANCE_PREFIX}biaflows-net \
    --network-alias=software_router \
    --privileged \
    -v $SOFTWARE_DOCKER_IMAGES_PATH:$SOFTWARE_DOCKER_IMAGES_PATH:Z,U \
    -v $SERVER_SSHKEYS_PATH:$SERVER_SSHKEYS_PATH:Z,U \
    --restart=unless-stopped \
    -p 22 \
    $SOFTWAREROUTER_NAMESPACE/software_router:$SOFTWAREROUTER_VERSION > /dev/null

    podman cp "${PWD}/hosts/software_router/addHosts.sh" ${INSTANCE_PREFIX}software_router:/tmp/addHosts.sh
    podman cp "${PWD}/configs/software_router/config.groovy" ${INSTANCE_PREFIX}software_router:/opt/config.groovy
    podman cp "${PWD}/configs/software_router/log4j.properties" ${INSTANCE_PREFIX}software_router:/opt/log4j.properties
    podman start ${INSTANCE_PREFIX}software_router
fi
